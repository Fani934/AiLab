import math

# Utility function to check if the game has ended in a win
def check_winner(board):
    # Check rows, columns, and diagonals
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] and board[i][0] != ' ':
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i] and board[0][i] != ' ':
            return board[0][i]
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != ' ':
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != ' ':
        return board[0][2]
    return None

# Check if the board is full (no moves left)
def is_board_full(board):
    for row in board:
        if ' ' in row:
            return False
    return True

# Minimax function to compute the best move
def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == 'X':
        return -10 + depth
    elif winner == 'O':
        return 10 - depth
    elif is_board_full(board):
        return 0

    if is_maximizing:
        best = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'  # Make a move for 'O'
                    best = max(best, minimax(board, depth + 1, False))
                    board[i][j] = ' '  # Undo the move
        return best
    else:
        best = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'  # Make a move for 'X'
                    best = min(best, minimax(board, depth + 1, True))
                    board[i][j] = ' '  # Undo the move
        return best

# Function to find the optimal move for the AI (Player 'O')
def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)
    
    # Loop through all the cells, evaluate the minimax value for each move and choose the best one
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'  # Try 'O' move
                move_val = minimax(board, 0, False)
                board[i][j] = ' '  # Undo the move
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    return best_move

# Print the board
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

# Check if the game is over and display the result
def is_game_over(board):
    winner = check_winner(board)
    if winner == 'X':
        print("Player X wins!")
        return True
    elif winner == 'O':
        print("AI O wins!")
        return True
    elif is_board_full(board):
        print("It's a draw!")
        return True
    return False

# Main game loop to simulate Tic-Tac-Toe
def main():
    # Initialize a Tic-Tac-Toe board (3x3 matrix)
    board = [[' ' for _ in range(3)] for _ in range(3)]
    
    print("Welcome to Tic-Tac-Toe Game!")
    print_board(board)
    
    # Game loop
    turn = 'X'  # Player X goes first
    while not is_game_over(board):
        if turn == 'X':
            print("\nPlayer X's turn")
            best_move = find_best_move(board)
            board[best_move[0]][best_move[1]] = 'X'
            print(f"Player X chooses: {best_move[0]} {best_move[1]}")
            print_board(board)
            turn = 'O'
        else:
            print("\nAI O's turn")
            best_move = find_best_move(board)
            board[best_move[0]][best_move[1]] = 'O'
            print(f"AI chooses: {best_move[0]} {best_move[1]}")
            print_board(board)
            turn = 'X'

if __name__ == "__main__":
    main()
