import pandas as pd
from sklearn.naive_bayes import CategoricalNB
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

data = {
    'age': ['youth', 'youth', 'middle_aged', 'senior', 'senior', 'senior', 'middle_aged', 'youth', 'youth', 'senior', 
            'youth', 'middle_aged', 'middle_aged', 'senior'],
    'income': ['high', 'high', 'high', 'medium', 'low', 'low', 'low', 'medium', 'low', 'medium', 
               'medium', 'medium', 'high', 'medium'],
    'student': ['no', 'no', 'no', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'yes', 
                'yes', 'no', 'yes', 'no'],
    'credit_rating': ['fair', 'excellent', 'fair', 'fair', 'fair', 'excellent', 'excellent', 'fair', 'fair', 'fair', 
                      'excellent', 'excellent', 'fair', 'excellent'],
    'buys_computer': ['no', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'no', 'yes', 'yes', 
                      'yes', 'yes', 'yes', 'no']
}

df = pd.DataFrame(data)

age_encoder = LabelEncoder()
income_encoder = LabelEncoder()
student_encoder = LabelEncoder()
credit_encoder = LabelEncoder()
buys_computer_encoder = LabelEncoder()

df['age'] = age_encoder.fit_transform(df['age'])
df['income'] = income_encoder.fit_transform(df['income'])
df['student'] = student_encoder.fit_transform(df['student'])
df['credit_rating'] = credit_encoder.fit_transform(df['credit_rating'])
df['buys_computer'] = buys_computer_encoder.fit_transform(df['buys_computer'])

X = df[['age', 'income', 'student', 'credit_rating']]
y = df['buys_computer']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)
model = CategoricalNB()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

test_data = [[age_encoder.transform(['youth'])[0], income_encoder.transform(['medium'])[0], 
              student_encoder.transform(['yes'])[0], credit_encoder.transform(['fair'])[0]]]
prediction = model.predict(test_data)
result = 'yes' if buys_computer_encoder.inverse_transform(prediction)[0] == 1 else 'no'

print("Prediction for youth/medium/yes/fair:", result)
print("Model Accuracy:", accuracy)
