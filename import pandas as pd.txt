import pandas as pd
from sklearn.naive_bayes import CategoricalNB
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Dataset
data = {
    'Outlook': ['Sunny', 'Sunny', 'Overcast', 'Rainy', 'Rainy', 'Rainy', 'Overcast', 'Sunny', 'Sunny', 'Rainy', 
                'Sunny', 'Overcast', 'Overcast', 'Rainy'],
    'Temperature': ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool', 'Mild', 'Cool', 'Mild', 'Mild', 'Mild', 
                    'Hot', 'Mild'],
    'Play': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']
}

# Convert data into DataFrame
df = pd.DataFrame(data)

# Label encoding for categorical variables
outlook_encoder = LabelEncoder()
temp_encoder = LabelEncoder()
play_encoder = LabelEncoder()

df['Outlook'] = outlook_encoder.fit_transform(df['Outlook'])
df['Temperature'] = temp_encoder.fit_transform(df['Temperature'])
df['Play'] = play_encoder.fit_transform(df['Play'])

# Features and target variable
X = df[['Outlook', 'Temperature']]
y = df['Play']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

# Model training
model = CategoricalNB()
model.fit(X_train, y_train)

# Accuracy on test data
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

# Prediction for specific conditions: Overcast and Mild
test_data = [[outlook_encoder.transform(['Overcast'])[0], temp_encoder.transform(['Mild'])[0]]]
prediction = model.predict(test_data)
result = 'Yes' if play_encoder.inverse_transform(prediction)[0] == 1 else 'No'

print("Prediction for Overcast and Mild:", result)
print("Model Accuracy:", accuracy)
